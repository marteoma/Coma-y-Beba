/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.c2m.globant.comaybeba.gui;

import com.c2m.globant.comaybeba.database.Conexion;
import com.c2m.globant.comaybeba.objects.Lugar;
import com.c2m.globant.comaybeba.objects.Mesa;
import java.awt.Color;
import java.util.ArrayList;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import com.c2m.globant.comaybeba.objects.Platillo;
import com.c2m.globant.comaybeba.objects.Reserva;
import com.firebase.client.ChildEventListener;
import com.firebase.client.DataSnapshot;
import com.firebase.client.Firebase;
import com.firebase.client.FirebaseError;
import com.firebase.client.ValueEventListener;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;

/**
 *
 * @author hhade
 */
public class Main extends javax.swing.JFrame {

    /**
     * Tipo Mesa
     */
    private final int MESA = 1;

    /**
     * Tipo lugar general
     */
    private final int GENERAL = 2;

    /**
     * Lista de Mesas. Esta lista es de Mesas de la interfaz, no de mesas en sí
     */
    public final ArrayList<MesaImagen> mesas = new ArrayList<>();

    /**
     * Lista de lugares generales. Esta lista es de lugares de interfaz
     */
    public final ArrayList<LugarImagen> lugares = new ArrayList<>();

    /**
     * Lista de platillos.
     */
    private final ArrayList<Platillo> platillos = new ArrayList<>();

    /**
     * Lista de reservas.
     */
    private final ArrayList<Reserva> reservas = new ArrayList<>();

    /**
     * Creates new form NewJFrame
     */
    public Main() {
        initComponents();
        this.getContentPane().setBackground(Color.BLACK);
        jtpDatos.setForeground(Color.red);
        btnMesa.setToolTipText("Añadir Mesa");
        btnGeneral.setToolTipText("Añadir Lugar General");
        bringData();
    }

    /**
     * Carga los platillos en la interfaz gráfica
     */
    private void updatePlati() {
        DefaultListModel<String> model = new DefaultListModel<>();
        platillos.forEach((Platillo platillo) -> {
            model.addElement(platillo.toString());
        });
        listMenu.setModel(model);
    }

    /**
     * Actualiza la lista de reservas de la interfaz, para que queden todas las
     * reservas que se han traído de la base de datos.
     */
    private void updaRes() {
        //TODO: Implementar

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buGroupEstadisticas = new javax.swing.ButtonGroup();
        jtpDatos = new javax.swing.JTabbedPane();
        panDiseñar = new javax.swing.JPanel();
        btnMesa = new javax.swing.JButton();
        btnGeneral = new javax.swing.JButton();
        panMapa = new javax.swing.JPanel();
        btnGuardar = new javax.swing.JButton();
        panMenu = new javax.swing.JPanel();
        jbVerdetalle = new javax.swing.JButton();
        lista = new javax.swing.JScrollPane();
        listMenu = new javax.swing.JList<>();
        btnCambiarEstado = new javax.swing.JButton();
        btnEliminar = new javax.swing.JButton();
        btnActualizar = new javax.swing.JButton();
        panCrearMenu = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtNombrePlatillo = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        btnAgregarPlatillo = new javax.swing.JButton();
        jLabel5 = new javax.swing.JLabel();
        jcEstado = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        txtPrecio = new javax.swing.JTextField();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtDescripcionPlatillo = new javax.swing.JTextArea();
        panReservas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableReservas = new javax.swing.JTable();
        btnMostrarReservas = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jcReservas = new javax.swing.JComboBox<>();
        panEstadisticas = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        rbClientes = new javax.swing.JRadioButton();
        rbMesas = new javax.swing.JRadioButton();
        rbMenu = new javax.swing.JRadioButton();
        jLabel8 = new javax.swing.JLabel();
        btnMostrar = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableEstadisticas = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        lbTitulo = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(0, 0, 0));
        setIconImage(getIconImage());
        setIconImages(null);
        setResizable(false);

        jtpDatos.setBackground(new java.awt.Color(0, 0, 0));
        jtpDatos.setForeground(new java.awt.Color(255, 0, 0));
        jtpDatos.setFont(new java.awt.Font("Book Antiqua", 1, 11)); // NOI18N

        panDiseñar.setBackground(new java.awt.Color(255, 255, 255));
        panDiseñar.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnMesa.setBackground(new java.awt.Color(255, 255, 255));
        btnMesa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/mesa.png"))); // NOI18N
        btnMesa.setBorder(null);
        btnMesa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMesaActionPerformed(evt);
            }
        });
        panDiseñar.add(btnMesa, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 86, 104, 89));

        btnGeneral.setBackground(new java.awt.Color(255, 255, 255));
        btnGeneral.setIcon(new javax.swing.ImageIcon(getClass().getResource("/general.png"))); // NOI18N
        btnGeneral.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGeneralActionPerformed(evt);
            }
        });
        panDiseñar.add(btnGeneral, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 186, 104, 95));

        panMapa.setBackground(new java.awt.Color(255, 255, 204));
        panMapa.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(255, 102, 0)));

        javax.swing.GroupLayout panMapaLayout = new javax.swing.GroupLayout(panMapa);
        panMapa.setLayout(panMapaLayout);
        panMapaLayout.setHorizontalGroup(
            panMapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 439, Short.MAX_VALUE)
        );
        panMapaLayout.setVerticalGroup(
            panMapaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 327, Short.MAX_VALUE)
        );

        panDiseñar.add(panMapa, new org.netbeans.lib.awtextra.AbsoluteConstraints(132, 35, -1, -1));

        btnGuardar.setBackground(new java.awt.Color(255, 204, 102));
        btnGuardar.setFont(new java.awt.Font("Lao UI", 0, 16)); // NOI18N
        btnGuardar.setText("Guardar");
        btnGuardar.setBorder(null);
        btnGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGuardarActionPerformed(evt);
            }
        });
        panDiseñar.add(btnGuardar, new org.netbeans.lib.awtextra.AbsoluteConstraints(303, 394, 90, 31));

        jtpDatos.addTab("Diseñar", panDiseñar);

        jbVerdetalle.setText("Ver detalles");
        jbVerdetalle.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVerdetalleActionPerformed(evt);
            }
        });

        listMenu.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        lista.setViewportView(listMenu);

        btnCambiarEstado.setText("Cambiar Estado");
        btnCambiarEstado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCambiarEstadoActionPerformed(evt);
            }
        });

        btnEliminar.setText("Eliminar");
        btnEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEliminarActionPerformed(evt);
            }
        });

        btnActualizar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/actualizarIcon.png"))); // NOI18N
        btnActualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnActualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panMenuLayout = new javax.swing.GroupLayout(panMenu);
        panMenu.setLayout(panMenuLayout);
        panMenuLayout.setHorizontalGroup(
            panMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMenuLayout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addGroup(panMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panMenuLayout.createSequentialGroup()
                        .addComponent(jbVerdetalle)
                        .addGap(18, 18, 18)
                        .addComponent(btnEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCambiarEstado))
                    .addGroup(panMenuLayout.createSequentialGroup()
                        .addComponent(lista, javax.swing.GroupLayout.PREFERRED_SIZE, 339, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(37, 37, 37)
                        .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(148, Short.MAX_VALUE))
        );
        panMenuLayout.setVerticalGroup(
            panMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panMenuLayout.createSequentialGroup()
                .addGroup(panMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panMenuLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(lista, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(panMenuLayout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(btnActualizar, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(30, 30, 30)
                .addGroup(panMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbVerdetalle)
                    .addComponent(btnEliminar)
                    .addComponent(btnCambiarEstado))
                .addContainerGap(206, Short.MAX_VALUE))
        );

        jtpDatos.addTab("Menú", panMenu);

        panCrearMenu.setBackground(new java.awt.Color(255, 255, 255));
        panCrearMenu.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 153, 0));
        jLabel1.setText("Nombre: ");
        panCrearMenu.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 14, -1, -1));
        panCrearMenu.add(txtNombrePlatillo, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 10, 300, 30));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 153, 0));
        jLabel4.setText("Estado, ¿Disponible? :");
        panCrearMenu.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 290, -1, -1));

        btnAgregarPlatillo.setBackground(new java.awt.Color(255, 204, 102));
        btnAgregarPlatillo.setFont(new java.awt.Font("Lao UI", 0, 16)); // NOI18N
        btnAgregarPlatillo.setText("Agregar");
        btnAgregarPlatillo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAgregarPlatilloActionPerformed(evt);
            }
        });
        panCrearMenu.add(btnAgregarPlatillo, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 370, -1, -1));

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 153, 0));
        jLabel5.setText("Descripción: ");
        panCrearMenu.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 80, -1, -1));

        jcEstado.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Sí", "No" }));
        panCrearMenu.add(jcEstado, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 280, 60, 30));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 153, 0));
        jLabel6.setText("Precio:");
        panCrearMenu.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 220, -1, -1));

        txtPrecio.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        txtPrecio.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtPrecioKeyTyped(evt);
            }
        });
        panCrearMenu.add(txtPrecio, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 210, 110, 30));

        txtDescripcionPlatillo.setColumns(20);
        txtDescripcionPlatillo.setRows(5);
        jScrollPane3.setViewportView(txtDescripcionPlatillo);

        panCrearMenu.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 60, 310, 100));

        jtpDatos.addTab("Crear Menú", null, panCrearMenu, "");

        panReservas.setBackground(new java.awt.Color(255, 255, 255));
        panReservas.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tableReservas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tableReservas);

        panReservas.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        btnMostrarReservas.setBackground(new java.awt.Color(255, 204, 102));
        btnMostrarReservas.setFont(new java.awt.Font("Lao UI", 0, 16)); // NOI18N
        btnMostrarReservas.setText("Mostrar");
        btnMostrarReservas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMostrarReservasActionPerformed(evt);
            }
        });
        panReservas.add(btnMostrarReservas, new org.netbeans.lib.awtextra.AbsoluteConstraints(492, 243, -1, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setForeground(new java.awt.Color(255, 153, 0));
        jLabel10.setText("Reservas");
        panReservas.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(492, 161, -1, -1));

        jcReservas.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Activas", "Ocupadas", "Pendientes" }));
        panReservas.add(jcReservas, new org.netbeans.lib.awtextra.AbsoluteConstraints(492, 193, 102, 32));

        jtpDatos.addTab("Reservas", panReservas);

        panEstadisticas.setBackground(new java.awt.Color(255, 255, 255));
        panEstadisticas.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setForeground(new java.awt.Color(255, 204, 0));

        rbClientes.setBackground(new java.awt.Color(255, 255, 255));
        buGroupEstadisticas.add(rbClientes);
        rbClientes.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rbClientes.setForeground(new java.awt.Color(255, 153, 0));
        rbClientes.setText("Clientes");
        rbClientes.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbClientesActionPerformed(evt);
            }
        });

        rbMesas.setBackground(new java.awt.Color(255, 255, 255));
        buGroupEstadisticas.add(rbMesas);
        rbMesas.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rbMesas.setForeground(new java.awt.Color(255, 153, 0));
        rbMesas.setText("Mesas");
        rbMesas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMesasActionPerformed(evt);
            }
        });

        rbMenu.setBackground(new java.awt.Color(255, 255, 255));
        buGroupEstadisticas.add(rbMenu);
        rbMenu.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        rbMenu.setForeground(new java.awt.Color(255, 153, 0));
        rbMenu.setText("Menú");
        rbMenu.setToolTipText("");
        rbMenu.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbMenuActionPerformed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(255, 153, 0));
        jLabel8.setText("Reportes");

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(rbClientes, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rbMenu)
                            .addComponent(rbMesas))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addGap(18, 18, 18))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(rbClientes)
                .addGap(18, 18, 18)
                .addComponent(rbMesas)
                .addGap(18, 18, 18)
                .addComponent(rbMenu)
                .addContainerGap(28, Short.MAX_VALUE))
        );

        panEstadisticas.add(jPanel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 22, -1, -1));

        btnMostrar.setBackground(new java.awt.Color(255, 204, 102));
        btnMostrar.setFont(new java.awt.Font("Lao UI", 0, 16)); // NOI18N
        btnMostrar.setText("Mostrar");
        panEstadisticas.add(btnMostrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 260, -1, -1));

        tableEstadisticas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(tableEstadisticas);

        panEstadisticas.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 70, 304, 241));

        jLabel9.setBackground(new java.awt.Color(204, 255, 204));
        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 153, 0));
        jLabel9.setText("Documento");
        panEstadisticas.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 40, 291, -1));

        jtpDatos.addTab("Estadísticas", panEstadisticas);

        lbTitulo.setFont(new java.awt.Font("Bodoni MT Black", 3, 14)); // NOI18N
        lbTitulo.setForeground(new java.awt.Color(255, 204, 0));
        lbTitulo.setText("Coma y Beba con Genoveva");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jtpDatos, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lbTitulo)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(lbTitulo)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jtpDatos))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbMenuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMenuActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbMenuActionPerformed

    private void btnMesaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMesaActionPerformed
        try {
            createSpace(MESA);
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnMesaActionPerformed

    private void btnGeneralActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGeneralActionPerformed
        try {
            createSpace(GENERAL);
        } catch (Exception ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnGeneralActionPerformed

    private void btnGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGuardarActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < mesas.size(); i++) {
            if (mesas.get(i).getClaveFirebase() == null) {
                Firebase clave = Conexion.getInstance().getRef().child("Mesas")
                        .push();
                mesas.get(i).setClaveFirebase(clave.getKey());
                clave.setValue(mesas.get(i).getMesa());
            } else {
                Conexion.getInstance().getRef().child("Mesas")
                        .child(mesas.get(i).getClaveFirebase())
                        .setValue(mesas.get(i).getMesa());
            }
        }
        for (int i = 0; i < lugares.size(); i++) {
            if (lugares.get(i).getClaveFirebase() == null) {
                Firebase clave = Conexion.getInstance().getRef().child("Lugares")
                        .push();
                lugares.get(i).setClaveFirebase(clave.getKey());
                clave.setValue(lugares.get(i).getLugar());
            } else {
                Conexion.getInstance().getRef().child("Lugares")
                        .child(lugares.get(i).getClaveFirebase())
                        .setValue(lugares.get(i).getLugar());
            }
        }

    }//GEN-LAST:event_btnGuardarActionPerformed

    private void jbVerdetalleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVerdetalleActionPerformed
        // TODO add your handling code here:
        if (!listMenu.isSelectionEmpty()) {
            Detalle d = new Detalle(platillos.get(listMenu.getSelectedIndex()));
            d.setVisible(true);
        } else {
            JOptionPane.showConfirmDialog(null, "Seleccione un platillo",
                    "No hay platillo seleccionado", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_jbVerdetalleActionPerformed

    private void btnAgregarPlatilloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAgregarPlatilloActionPerformed
        // TODO add your handling code here:
        String nombre = txtNombrePlatillo.getText().trim();
        String desc = txtDescripcionPlatillo.getText().trim();
        boolean estado = jcEstado.getSelectedIndex() == 0;        
        if (!nombre.isEmpty() 
                && !desc.isEmpty() 
                && !txtPrecio.getText().isEmpty()) {
            int precio = Integer.parseInt(txtPrecio.getText());
            Platillo p = new Platillo(nombre, desc, precio, estado);
            Conexion.getInstance().getRef().child("Platillos").push().setValue(p);
            updatePlati();
            JOptionPane.showMessageDialog(null,
                    "Platillo Creado exitosamente",
                    "Éxito",
                    JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showConfirmDialog(null, "Debe llenar todos los campos",
                    "Campos Vacíos", JOptionPane.OK_CANCEL_OPTION, JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnAgregarPlatilloActionPerformed

    /**
     * Este evento evita que el precio de un platillo pueda ser mayor a 5 digitos
     * y obliga a escribir números.
     * @param evt 
     */
    private void txtPrecioKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtPrecioKeyTyped
        // TODO add your handling code here:
        if (!Character.isDigit(evt.getKeyChar()) 
                || txtPrecio.getText().length() > 5) {
            evt.consume();
        }
    }//GEN-LAST:event_txtPrecioKeyTyped

    private void addPopUpMenu(int tipo, Image componente) throws Exception {
        JPopupMenu desp = new JPopupMenu();
        JMenuItem eliminar = new JMenuItem("Elminar");

        switch (tipo) {
            case MESA:
                eliminar.addActionListener((java.awt.event.ActionEvent e1) -> {
                    Conexion.getInstance().getRef()
                            .child("Mesas").orderByKey()
                            .equalTo(((MesaImagen) componente).getClaveFirebase())
                            .addChildEventListener(new ChildEventListener() {
                        @Override
                        public void onChildAdded(DataSnapshot ds, String string) {
                            ds.getRef().removeValue();
                        }

                        @Override
                        public void onChildChanged(DataSnapshot ds, String string) {
                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }

                        @Override
                        public void onChildRemoved(DataSnapshot ds) {
                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }

                        @Override
                        public void onChildMoved(DataSnapshot ds, String string) {
                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }

                        @Override
                        public void onCancelled(FirebaseError fe) {
                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }
                    });
                            
                    mesas.remove((MesaImagen) componente);
                    panMapa.remove(componente);
                    panMapa.repaint();
                });
                break;
            case GENERAL:
                eliminar.addActionListener((java.awt.event.ActionEvent e1) -> {
                    Conexion.getInstance().getRef()
                            .child("Lugares").orderByKey()
                            .equalTo(((LugarImagen) componente).getClaveFirebase())
                            .addChildEventListener(new ChildEventListener() {
                        @Override
                        public void onChildAdded(DataSnapshot ds, String string) {
                            ds.getRef().removeValue();
                        }

                        @Override
                        public void onChildChanged(DataSnapshot ds, String string) {
                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }

                        @Override
                        public void onChildRemoved(DataSnapshot ds) {
                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }

                        @Override
                        public void onChildMoved(DataSnapshot ds, String string) {
                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }

                        @Override
                        public void onCancelled(FirebaseError fe) {
                            throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                        }
                    });
                    lugares.remove((LugarImagen) componente);
                    panMapa.remove(componente);
                    panMapa.repaint();
        });
                break;
            default:
                throw new Exception("No es un tipo");
        }

        desp.add(eliminar);
        componente.setComponentPopupMenu(desp);
    }

    private void btnCambiarEstadoActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
        Platillo p;
        if(!listMenu.isSelectionEmpty())
            p = platillos.get(listMenu.getSelectedIndex());
        else{
            JOptionPane.showMessageDialog(null,
                    "Debe seleccionar un platillo", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }
        platillos.get(listMenu.getSelectedIndex()).cambiarEstado();        

        Conexion.getInstance().getRef().child("Platillos").orderByChild("nombre")
                .equalTo(p.getNombre()).addChildEventListener(new ChildEventListener() {
            @Override
            public void onChildAdded(DataSnapshot snapshot, String previousChild) {
                snapshot.getRef().setValue(p);
            }

            @Override
            public void onChildChanged(DataSnapshot ds, String string) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void onChildRemoved(DataSnapshot ds) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void onChildMoved(DataSnapshot ds, String string) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void onCancelled(FirebaseError fe) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
        updatePlati();
    }

    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed

        // TODO add your handling code here:
        Platillo p;
        if(!listMenu.isSelectionEmpty())
            p = platillos.get(listMenu.getSelectedIndex());
        else{
            JOptionPane.showMessageDialog(null,
                    "Debe seleccionar un platillo", "Error",
                    JOptionPane.ERROR_MESSAGE);
            return;
        }

        Conexion.getInstance().getRef().child("Platillos").orderByChild("nombre")
                .equalTo(p.getNombre()).addChildEventListener(new ChildEventListener() {
            @Override
            public void onChildAdded(DataSnapshot snapshot, String previousChild) {
                snapshot.getRef().removeValue();
            }

            @Override
            public void onChildChanged(DataSnapshot ds, String string) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void onChildRemoved(DataSnapshot ds) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void onChildMoved(DataSnapshot ds, String string) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

            @Override
            public void onCancelled(FirebaseError fe) {
                throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }
        });
        platillos.remove(listMenu.getSelectedIndex());
        updatePlati();
    }//GEN-LAST:event_btnEliminarActionPerformed

    private void btnActualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnActualizarActionPerformed
        // TODO add your handling code here:
        bringData();
    }//GEN-LAST:event_btnActualizarActionPerformed

    private void btnMostrarReservasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMostrarReservasActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_btnMostrarReservasActionPerformed

    private void rbClientesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbClientesActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbClientesActionPerformed

    private void rbMesasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbMesasActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rbMesasActionPerformed

    /**
     * Trae todos los datos de la base de datos
     */
    private void bringData() {
        bringMesas();
        bringLugares();
        bringPlatillos();
        bringReservas();
    }

    /**
     * Trae de la base de datos los datos sobre las mesas y las almacena en una
     * lista local
     */
    private void bringMesas() {
        mesas.clear();//Not sure of this line
        Conexion.getInstance().getRef().child("Mesas").
                addValueEventListener(new ValueEventListener() {
                    @Override
                    public void onDataChange(DataSnapshot ds) {
                        for (DataSnapshot d : ds.getChildren()) {
                            Mesa m = (Mesa) d.getValue(Mesa.class);
                            MesaImagen mi = new MesaImagen(m);
                            mi.setClaveFirebase(d.getKey());
                            if (!mesas.contains(mi)) {
                                panMapa.add(mi).repaint();
                                try {
                                    addPopUpMenu(MESA, mi);
                                } catch (Exception ex) {
                                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                mesas.add(mi);
                            }
                        }
                    }

                    @Override
                    public void onCancelled(FirebaseError fe) {

                    }
                });
    }

    /**
     * Trae de la base de datos los datos sobre los lugares y los almacena en
     * una lista local
     */
    private void bringLugares() {
        lugares.clear();//Not sure of this line
        Conexion.getInstance().getRef().child("Lugares").
                addValueEventListener(new ValueEventListener() {
                    @Override
                    public void onDataChange(DataSnapshot ds) {
                        for (DataSnapshot d : ds.getChildren()) {
                            Lugar m = (Lugar) d.getValue(Lugar.class);
                            String nombre = m.getNombre();
                            LugarImagen mi = new LugarImagen(nombre, m);
                            mi.setClaveFirebase(d.getKey());
                            if (!lugares.contains(mi)) {
                                panMapa.add(mi).repaint();
                                try {
                                    addPopUpMenu(GENERAL, mi);
                                } catch (Exception ex) {
                                    Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                                }
                                lugares.add(mi);
                            }
                        }
                    }

                    @Override
                    public void onCancelled(FirebaseError fe) {

                    }
                });
    }

    /**
     * Trae de la base de datos los datos sobre los platillos y los almacena en
     * una lista local
     */
    private void bringPlatillos() {
        platillos.clear();//Not sure of this line
        Conexion.getInstance().getRef().child("Platillos").
                addValueEventListener(new ValueEventListener() {
                    @Override
                    public void onDataChange(DataSnapshot ds) {
                        for (DataSnapshot d : ds.getChildren()) {
                            Platillo m = d.getValue(Platillo.class);
                            if (!platillos.contains(m)) {
                                platillos.add(m);
                            }
                        }
                        updatePlati();
                    }
                    @Override
                    public void onCancelled(FirebaseError fe) {

                    }
                });
    }

    /**
     * Trae la información sobre las reservas de la base de datos y las almacena
     */
    private void bringReservas() {
        Conexion.getInstance().getRef().child("Reservas").
                addValueEventListener(new ValueEventListener() {
                    @Override
                    public void onDataChange(DataSnapshot ds) {
                        for (DataSnapshot d : ds.getChildren()) {
                            Reserva m = d.getValue(Reserva.class);
                            if (!reservas.contains(m)) {
                                reservas.add(m);
                            }
                        }
                        updaRes();
                    }
                    @Override
                    public void onCancelled(FirebaseError fe) {
                        JOptionPane.showMessageDialog(null,
                                "Ha ocurrido un error en la base de datos",
                                "Error", JOptionPane.ERROR_MESSAGE);
                    }
                });
    }

    /**
     * Permite crear en el mapa un lugar o una mesa, y lo almacena localmente
     *
     * @param tipo Indica si se está creando una mesa o un lugar general
     */
    private boolean createSpace(int tipo) throws Exception {
        switch (tipo) {
            case MESA:
                int capacidad;
                int id;
                String strCapacidad = (JOptionPane.showInputDialog(null,
                        "Cuál es la capacidad de esta mesa",
                        "Capacidad",
                        JOptionPane.QUESTION_MESSAGE));
                if (strCapacidad != null) {
                    if (isNumber(strCapacidad)) {
                        capacidad = Integer.parseInt(strCapacidad);
                    } else {
                        JOptionPane.showMessageDialog(null, "Ingrese un número",
                                "Error", JOptionPane.ERROR_MESSAGE);
                        return false;
                    }
                } else {
                    return false;
                }

                String strId = (JOptionPane.showInputDialog(null,
                        "Cuál es el número de la mesa",
                        "Identificación",
                        JOptionPane.QUESTION_MESSAGE));
                if (strId != null) {
                    if (isNumber(strId)) {
                        id = Integer.parseInt(strId);
                    } else {
                        JOptionPane.showMessageDialog(null, "Ingrese un número",
                                "Error", JOptionPane.ERROR_MESSAGE);
                        return false;
                    }
                } else {
                    return false;
                }
                MesaImagen m = new MesaImagen(capacidad, id);
                addPopUpMenu(MESA, m);
                panMapa.add(m).repaint();
                mesas.add(m);
                return true;
            case GENERAL:
                String nombre = JOptionPane.showInputDialog(null,
                        "Cuál es el nombre del objeto",
                        "Objeto",
                        JOptionPane.QUESTION_MESSAGE);
                if (nombre == null) {
                    return false;
                }
                LugarImagen l = new LugarImagen(nombre);
                addPopUpMenu(GENERAL, l);
                panMapa.add(l).repaint();
                lugares.add(l);
                return true;
            default:
                throw new Exception("No es un tipo");
        }
    }

    /**
     * Verifica si una cadena de texto es solo un número
     * @param string
     * @return 
     */
    public boolean isNumber(String string) {
        if (string == null || string.isEmpty()) {
            return false;
        }
        int i = 0;
        if (string.charAt(0) == '-') {
            if (string.length() > 1) {
                i++;
            } else {
                return false;
            }
        }
        for (; i < string.length(); i++) {
            if (!Character.isDigit(string.charAt(i))) {
                return false;
            }
        }
        return true;
    }

    @Override
    public java.awt.Image getIconImage() {
        java.awt.Image retValue = java.awt.Toolkit.getDefaultToolkit().
                getImage(ClassLoader.getSystemResource("Logo.png"));
        return retValue;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Main().setVisible(true);
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnActualizar;
    private javax.swing.JButton btnAgregarPlatillo;
    private javax.swing.JButton btnCambiarEstado;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnGeneral;
    private javax.swing.JButton btnGuardar;
    private javax.swing.JButton btnMesa;
    private javax.swing.JButton btnMostrar;
    private javax.swing.JButton btnMostrarReservas;
    private javax.swing.ButtonGroup buGroupEstadisticas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JButton jbVerdetalle;
    private javax.swing.JComboBox<String> jcEstado;
    private javax.swing.JComboBox<String> jcReservas;
    private javax.swing.JTabbedPane jtpDatos;
    private javax.swing.JLabel lbTitulo;
    private javax.swing.JList<String> listMenu;
    private javax.swing.JScrollPane lista;
    private javax.swing.JPanel panCrearMenu;
    private javax.swing.JPanel panDiseñar;
    private javax.swing.JPanel panEstadisticas;
    private javax.swing.JPanel panMapa;
    private javax.swing.JPanel panMenu;
    private javax.swing.JPanel panReservas;
    private javax.swing.JRadioButton rbClientes;
    private javax.swing.JRadioButton rbMenu;
    private javax.swing.JRadioButton rbMesas;
    private javax.swing.JTable tableEstadisticas;
    private javax.swing.JTable tableReservas;
    private javax.swing.JTextArea txtDescripcionPlatillo;
    private javax.swing.JTextField txtNombrePlatillo;
    private javax.swing.JTextField txtPrecio;
    // End of variables declaration//GEN-END:variables

}
